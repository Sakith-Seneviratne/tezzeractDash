import { BaseLLMProvider } from './base-provider';
import { LLMRequest, LLMResponse } from './types';

export class GoogleProvider extends BaseLLMProvider {
  private baseUrl = 'https://generativelanguage.googleapis.com/v1beta';

  async generateContent(request: LLMRequest): Promise<LLMResponse> {
    this.validateRequest(request);

    try {
      const response = await fetch(`${this.baseUrl}/models/${request.model || this.model}:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: request.prompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: request.temperature || this.temperature,
            maxOutputTokens: request.maxTokens || this.maxTokens,
          },
        }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(`Google AI API error: ${error.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      const content = data.candidates[0]?.content?.parts[0]?.text;

      if (!content) {
        throw new Error('No content generated by Google AI');
      }

      return this.formatResponse(content, data.usageMetadata);
    } catch (error) {
      console.error('Google AI API error:', error);
      throw new Error(`Failed to generate content: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
}
